{"version":3,"file":"static/js/602.0359075e.chunk.js","mappings":"6OAUaA,EAAmB,WAAO,IAADC,EAAAC,EAC5BC,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAAkCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA8BT,EAAAA,EAAAA,UAAS,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAnCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAEpBG,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,QAA2B,QAArBvB,EAAe,QAAfC,EAACiB,EAASM,aAAK,IAAAvB,OAAA,EAAdA,EAAgBwB,YAAI,IAAAzB,EAAAA,EAAI,KAAK0B,QAiBrD,OAfAC,EAAAA,EAAAA,YAAU,WACHzB,IACLW,GAAa,IACbe,EAAAA,EAAAA,IAAa,CAAEC,YAAa,eAAgBC,SAAU5B,IACnD6B,MAAK,SAAAC,GACJ,OAAOvB,EAAauB,EACtB,IACCC,OAAM,SAAAC,GAAK,OAAIjB,EAAWiB,EAAMC,QAAQ,IACxCC,QAAQvB,GAAa,IAC1B,GAAG,CAACX,IAOFM,EAAU6B,KACRC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAS,CAACjC,UAAWA,EAAWkC,UAPvC,WACEtB,EAASE,EACX,KAMMkB,EAAAA,EAAAA,KAACG,EAAAA,GAAc,IACd/B,IAAa4B,EAAAA,EAAAA,KAACI,EAAAA,GAAM,IACpB5B,IAAWwB,EAAAA,EAAAA,KAACK,EAAAA,GAAK,CAACC,UAAS,GAAAC,OAAK/B,EAAO,2BACxCwB,EAAAA,EAAAA,KAACQ,EAAAA,SAAQ,CAACC,UAAUT,EAAAA,EAAAA,KAACI,EAAAA,GAAM,IAAIL,UAC7BC,EAAAA,EAAAA,KAACU,EAAAA,GAAM,QAKjB,C","sources":["pages/MovieDetailsPage.jsx"],"sourcesContent":["import {\n  Loader,\n  CardMovie,\n  getDataQuery,\n  AdditionalInfo,\n  Error,\n} from 'components';\nimport { Suspense, useEffect, useRef, useState } from 'react';\nimport { Outlet, useLocation, useNavigate, useParams } from 'react-router-dom';\n\nexport const MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const [movieData, setMovieData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState('');\n\n  const location = useLocation();\n  const navigate = useNavigate();\n  const backLink = useRef(location.state?.from ?? '/').current;\n\n  useEffect(() => {\n    if (!movieId) return;\n    setIsLoading(true);\n    getDataQuery({ typeRequest: 'movieDetails', movie_id: movieId })\n      .then(response => {\n        return setMovieData(response);\n      })\n      .catch(error => setIsError(error.message))\n      .finally(setIsLoading(false));\n  }, [movieId]);\n\n  function getGoBack() {\n    navigate(backLink);\n  }\n\n  return (\n    movieData.id && (\n      <div>\n        <CardMovie movieData={movieData} getGoBack={getGoBack} />\n        <AdditionalInfo />\n        {isLoading && <Loader />}\n        {isError && <Error textError={`${isError} on Server. Sorry...`} />}\n        <Suspense fallback={<Loader />}>\n          <Outlet />\n        </Suspense>\n      </div>\n    )\n  );\n};\n"],"names":["MovieDetailsPage","_location$state$from","_location$state","movieId","useParams","_useState","useState","_useState2","_slicedToArray","movieData","setMovieData","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","isError","setIsError","location","useLocation","navigate","useNavigate","backLink","useRef","state","from","current","useEffect","getDataQuery","typeRequest","movie_id","then","response","catch","error","message","finally","id","_jsxs","children","_jsx","CardMovie","getGoBack","AdditionalInfo","Loader","Error","textError","concat","Suspense","fallback","Outlet"],"sourceRoot":""}